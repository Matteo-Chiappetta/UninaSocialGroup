TRIGGER X PROGETTO MODIFICATI

?)Data e ora del post inserite automaticamente.

FUNZIONE:

CREATE OR REPLACE FUNCTION assegnazioneDataPost()
RETURNS TRIGGER
language plpgsql
AS $assegnazioneDataPost$
DECLARE
	current_date DATE;
	current_time TIME;
	
BEGIN

	SELECT SYSDATE INTO current_date
  		FROM dual;
	SELECT SYSDATE INTO current_time
 		FROM dual;

	NEW.data = current_date;
	NEW.ora = current_time;

END;
$assegnazioneDataPost$

TRIGGER:
CREATE TRIGGER assegnazioneDataPost
BEFORE INSERT ON Post
FOR EACH ROW EXECUTE assegnazioneDataPost();


-------------------------------------------------------------------------------------------------------------------------

3)data e ora del commento del post non può essere antecedente alla data e ora della pubblicazione del post.

FUNZIONE:
CREATE OR REPLACE FUNCTION assegnazioneDataCommento()
RETURNS TRIGGER
language plpgsql
AS $assegnazioneDataCommento$
DECLARE
	current_date DATE;
	current_time TIME;

	e_data_non_valida EXCEPTION;
	PRAGMA EXCEPTION_INIT( e_data_non_valida, -20001 );

	data_post Post.data%TYPE;
	ora_post Post.ora%TYPE;
	
BEGIN

	SELECT SYSDATE INTO current_date
 		FROM dual;
	SELECT SYSDATE INTO current_time
  		FROM dual;

	SELECT P.data, P.ora INTO data_post, ora_post
		FROM Post AS P
		WHERE NEW.id_post = P.id_post;

	IF ( data_post > NEW.data_commento || ora_post > NEW.ora_commento ) THEN
		RAISE e_data_non_valida;
	ELSE
		NEW.data_commento = current_date;
		NEW.ora_commento = current_time;
	ENDIF;

EXCEPTION
	WHEN e_data_non_valida THEN
		DBMS_OUTPUT.putline('Data o ora del commento non valida.');
		ROLLBACK??


END;
$assegnazioneDataCommento$;

TRIGGER:
CREATE TRIGGER assegnazioneDataCommento
BEFORE INSERT ON Commento
FOR EACH ROW EXECUTE FUNCTION assegnazioneDataCommento();



3.2)data e ora del mi piace del post non può essere antecedente alla data e ora della pubblicazione del post.

FUNZIONE:
CREATE OR REPLACE FUNCTION assegnazioneDataMiPiace()
RETURNS TRIGGER
language plpgsql
AS $assegnazioneDataMiPiace$
DECLARE
	current_date DATE;
	current_time TIME;

	e_data_non_valida EXCEPTION;
	PRAGMA EXCEPTION_INIT( e_data_non_valida, -20001 );

	data_post Post.data%TYPE;
	ora_post Post.ora%TYPE;
	
BEGIN

	SELECT SYSDATE INTO current_date
 		FROM dual;
	SELECT SYSDATE INTO current_time
  		FROM dual;

	SELECT P.data, P.ora INTO data_post, ora_post
		FROM Post AS P
		WHERE NEW.id_post = P.id_post;

	IF ( data_post > NEW.data_commento || ora_post > NEW.ora_commento ) THEN
		RAISE e_data_non_valida;
	ELSE
		NEW.data_commento = current_date;
		NEW.ora_commento = current_time;
	ENDIF;

EXCEPTION
	WHEN e_data_non_valida THEN
		DBMS_OUTPUT.putline('Data o ora del mi piace non valida.);
		ROLLBACK??


END;
$assegnazioneDataMiPiace$;

TRIGGER:
CREATE TRIGGER assegnazioneDataMiPiace
BEFORE INSERT ON Mi_Piace
FOR EACH ROW EXECUTE FUNCTION assegnazioneDataMiPiace();

-------------------------------------------------------------------------------------------------------------------------


4)leggittimita dell'email verificare che abbia la @.

ALTER TABLE Utente
ADD CONSTRAINT check_email_valida 
		CHECK (email ~'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$') ;

-------------------------------------------------------------------------------------------------------------------------


6)Vincolo verifica password con carattere maiuscolo,numeri, caratteri speciali e che abbia almeno 8 caratteri.

ALTER TABLE Utente
ADD CONSTRAINT check_password_valida 
CHECK (
    password ~ '[0-9]' AND
    password ~ '[A-Z]' AND
    password ~ '[a-z]' AND
    password ~ '[!?@#%&$]' AND
    LENGTH(password) >= 8
);

-------------------------------------------------------------------------------------------------------------------------

12.1) Per ogni post pubblicato deve esserci una sola notifica

ALTER TABLE Notifica
ADD CONSTRAINT  notifica_per_post UNIQUE (id_notifica, id_post_pubblicato); 						//(C'E' GIA??)

---------------------------------------------------------------------------------------------------------------------------
FUNZIONE:
CREATE OR REPLACE FUNCTION NuovaNotifica()
RETURNS TRIGGER
language plpgsql
AS $NuovaNotifica$
DECLARE
BEGIN
	insert into notifica(id_post_pubblicato) values (NEW.id_post);
RETURN NEW;
END;
$NuovaNotifica$;


TRIGGER:
CREATE TRIGGER NuovaNotifica
AFTER INSERT ON post
FOR EACH ROW EXECUTE FUNCTION NuovaNotifica();
---------------------------------------------------------------------------------------------------------------------------

12.2)data e ora della notifica del post non può essere antecedente alla data e ora della pubblicazione del post.

FUNZIONE:
CREATE OR REPLACE FUNCTION assegnazioneDataNotifica()
RETURNS TRIGGER
language plpgsql
AS $assegnazioneDataNotifica$
DECLARE
	current_date DATE;
	current_time TIME;

	e_data_non_valida EXCEPTION;
	PRAGMA EXCEPTION_INIT( e_data_non_valida, -20001 );

	data_post Post.data%TYPE;
	ora_post Post.ora%TYPE;
	
BEGIN

	SELECT SYSDATE INTO current_date
 		FROM dual;
	SELECT SYSDATE INTO current_time
  		FROM dual;

	SELECT P.data, P.ora INTO data_post, ora_post
		FROM Post AS P
		WHERE NEW.id_post = P.id_post;

	IF ( data_post > NEW.data_notifica || ora_post > NEW.ora_notifica ) THEN
		RAISE e_data_non_valida;
	ELSE
		NEW.data_commento = current_date;
		NEW.ora_commento = current_time;
	ENDIF;

EXCEPTION
	WHEN e_data_non_valida THEN
		DBMS_OUTPUT.putline('Data o ora del commento non valida.);
		ROLLBACK??


END;
$assegnazioneDataNotifica$;

TRIGGER:
CREATE TRIGGER assegnazioneDataNotifica
BEFORE INSERT ON Notifica
FOR EACH ROW EXECUTE FUNCTION assegnazioneDataNotifica();


-------------------------------------------------------------------------------------------------------------------------


?)Alla creazione di una notifica, la tabella Raggiunge viene popolata, inviando la notifica a tutti i 
partecipanti del gruppo in cui è stato pubblicato il post.

FUNZIONE:
CREATE OR REPLACE FUNCTION notificaRaggiungeUtenti()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $notificaRaggiungeUtenti$
DECLARE 
    recupera_utenti CURSOR FOR
        SELECT PG.email_membro
        FROM Post P
        JOIN Gruppo G ON P.tag_gruppo = G.tag
        JOIN Partecipanti_al_gruppo PG ON G.tag = PG.tag_gruppo
        WHERE P.id_post = NEW.id_post_pubblicato;

    email Utente.email%TYPE;
BEGIN
    OPEN recupera_utenti;

    LOOP
        FETCH recupera_utenti INTO email;
        EXIT WHEN NOT FOUND; -- Corretto NOT FOUND
        INSERT INTO Raggiunge VALUES (email, NEW.id_notifica);
    END LOOP;

    CLOSE recupera_utenti;
RETURN NEW;
END;
$notificaRaggiungeUtenti$;
 

TRIGGER:
CREATE TRIGGER notificaRaggiungeUtenti
AFTER INSERT ON Notifica
FOR EACH ROW notificaRaggiungeUtenti();

-------------------------------------------------------------------------------------------------------------------------

ALTRI TRIGGER E FUNZIONI


ALTER TABLE Post
ADD COLUMN num_mi_piace INT
ADD COLUMN num_commenti INT 

1.1) Ogni volta che si aggiunge un mi piace, cambia il numero di mi piace ad un post.

FUNZIONE:
CREATE OR REPLACE FUNCTION aumentaNumMiPiace()
RETURNS TRIGGER
language plpgsql
AS $aumentaNumMiPiace$
DECLARE
	num_mp Post.num_mi_piace%TYPE;

BEGIN

	SELECT COUNT(*) INTO num_mp
		FROM Mi_piace AS MP
		WHERE MP.id_post = NEW.id_post;

UPDATE Post
	SET num_mi_piace = num_mp
	WHERE P.id_post = NEW.id_post;

END;
$aumentaNumMiPiace$;



TRIGGER:
CREATE TRIGGER aumentaNumMiPiace
AFTER INSERT ON Mi_piace
FOR EACH ROW EXECUTE aumentaNumMiPiace();

1.2) Ogni volta che si toglie un mi piace, cambia il numero di mi piace ad un post.

FUNZIONE:
CREATE OR REPLACE FUNCTION diminuisciNumMiPiace()
RETURNS TRIGGER
language plpgsql
AS $diminuisciNumMiPiace$
DECLARE
	num_mp Post.num_mi_piace%TYPE;

BEGIN

	SELECT COUNT(*) INTO num_mp
		FROM Mi_piace AS MP
		WHERE MP.id_post = OLD.id_post;

	UPDATE Post
		SET num_mi_piace = num_mp
		WHERE P.id_post = OLD.id_post;

END;
$diminuisciNumMiPiace$;



TRIGGER:
CREATE TRIGGER diminuisciNumMiPiace
AFTER DELETE ON Mi_piace
FOR EACH ROW EXECUTE diminuisciNumMiPiace();


-------------------------------------------------------------------------------------------------------------------------

2.1)[stessa cosa di sopra] Ogni volta che si aggiunge un commento, cambia il numero di commenti ad un post.

FUNZIONE:
CREATE OR REPLACE FUNCTION aumentaNumCommento()
RETURNS TRIGGER
language plpgsql
AS $aumentaNumCommento$
DECLARE
	num_cm Post.num_commenti%TYPE;

BEGIN

	SELECT COUNT(*) INTO num_cm
		FROM Commento AS CM
		WHERE CM.id_post = NEW.id_post;

UPDATE Post
	SET num_commenti = num_cm
	WHERE P.id_post = NEW.id_post;

END;
$aumentaNumCommento$;


TRIGGER:
CREATE TRIGGER aumentaNumCommento
AFTER INSERT ON Mi_piace
FOR EACH ROW EXECUTE aumentaNumCommento();

2.2) Ogni volta che si toglie un commento, cambia il numero di commenti ad un post.

FUNZIONE:
CREATE OR REPLACE FUNCTION diminuisciNumCommenti()
RETURNS TRIGGER
language plpgsql
AS $diminuisciNumCommenti$
DECLARE
	num_cm Post.num_commenti%TYPE;

BEGIN

	SELECT COUNT(*) INTO num_cm
		FROM Commento AS CM
		WHERE CM.id_post = OLD.id_post;

	UPDATE Post
		SET num_commenti = num_cm
		WHERE P.id_post = OLD.id_post;

END;
$diminuisciNumCommenti$;



TRIGGER:
CREATE TRIGGER diminuisciNumCommenti
AFTER DELETE ON Mi_piace
FOR EACH ROW EXECUTE diminuisciNumCommenti();




[Per far si che num_mi_piace e num_commenti rimangano consistenti, ovvero che nessuno possa
modificare questi numeri senza che siano valori validi, aggiungo anche un trigger sull'update]
1.3)TRIGGER:
CREATE TRIGGER controlloNumMiPiace
BEFORE UPDATE ON Post
FOR EACH ROW
WHEN ( OLD.num_mi_piace <> NEW.num_mi_piace )
EXECUTE aumentaNumMiPiace();

2.3)TRIGGER:
CREATE TRIGGER controlloNumCommenti
BEFORE UPDATE ON Post
FOR EACH ROW 
WHEN ( OLD.num_commenti <> NEW.num_commenti )
EXECUTE aumentaNumCommento();



-------------------------------------------------------------------------------------------------------------------------
14) un utente puo' far parte di un gruppo una sola volta.

ALTER TABLE Partecipanti_al_gruppo
	ADD CONSTRAINT partecipa_una_volta UNIQUE(email_membro, tag_gruppo); MESSO



4)quando viene creato un gruppo, automaticamente viene aggiunto il creatore nella lista dei partecipanti.

FUNZIONE:
CREATE OR REPLACE FUNCTION primoPartecipante()
RETURNS TRIGGER
language plpgsql
AS $primoPartecipante$
BEGIN

	INSERT INTO Partecipanti_al_gruppo 
		VALUES(NEW.email_creatore, NEW.tag);
return new;

END;	
$primoPartecipante$;


TRIGGER:
CREATE TRIGGER primoPartecipante
AFTER INSERT ON Gruppo
FOR EACH ROW EXECUTE FUNCTION primoPartecipante();


-------------------------------------------------------------------------------------------------------------------------
5)Alla creazione di una nuova richiesta, l'attributo accettata è NULL (la richiesta non è stata
ancora presa in considerazione).

FUNZIONE:
CREATE OR REPLACE FUNCTION nuovaRichiesta()
RETURNS TRIGGER
language plpgsql
AS $nuovaRichiesta$
BEGIN

	NEW.accettata = NULL;

END;
$nuovaRichiesta$;



TRIGGER:
CREATE TRIGGER nuovaRichiesta
BEFORE INSERT ON Richieste
FOR EACH ROW EXECUTE nuovaRichiesta();


[FORSE QUESTO TRIGGER PUò ESSERE RIASSUNTO NEL 16), AGGIUNGO QUESTA
RIGA SUBITO DOPO IL BEGIN]


-------------------------------------------------------------------------------------------------------------------------


6)quando in Richiesta viene fatto un UPDATE  di accettata (da NULL/0 a 1), viene aggiunta la riga in Partecipanti_al_gruppo

FUNZIONE:
CREATE OR REPLACE FUNCTION accettaNuovoMembro()
RETURNS TRIGGER
language plpgsql
AS $accettaNuovoMembro$
BEGIN
	IF OLD.accettato = NULL AND NEW.accettato = true THEN
		INSERT INTO Partecipanti_al_gruppo
			VALUES (NEW.email_utente, NEW.tag_gruppo);
	ENDIF;
	
return new;
END;
$accettaNuovoMembro$;



TRIGGER:
CREATE TRIGGER accettaNuovoMembro
AFTER UPDATE ON Richiesta
FOR EACH ROW
EXECUTE FUNCTION accettaNuovoMembro();
---------------------versione chatgpt--------------------------------
CREATE OR REPLACE FUNCTION accettaNuovoMembro()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $accettaNuovoMembro$
BEGIN
    IF OLD.accettato IS NULL AND NEW.accettato = true THEN
        INSERT INTO Partecipanti_al_gruppo (email_membro, tag_gruppo)
        VALUES (NEW.email_utente, NEW.tag_gruppo);
    END IF;
    
    RETURN NEW;
END;
$accettaNuovoMembro$;



-------------------------------------------------------------------------------------------------------------------------

16)Se esiste già una richiesta (di un dato utente per un dato gruppo) ancora non considerata, allora non si può aggiungere una nuova richiesta.


---------------------------VERSIONE CHATGPT_________________
CREATE OR REPLACE FUNCTION richiestaGruppoValida()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $richiestaGruppoValida$
DECLARE
    richieste_in_corso INT;
BEGIN
    SELECT COUNT(*) INTO richieste_in_corso
    FROM Richiesta AS R
    WHERE R.email_utente = NEW.email_utente 
        AND R.tag_gruppo = NEW.tag_gruppo
        AND R.accettato IS NULL;

    IF richieste_in_corso > 0 THEN
        RAISE EXCEPTION 'Richiesta inserita non valida: esiste già una richiesta ancora da considerare.';
    END IF;

    RETURN NEW;
END;
$richiestaGruppoValida$;








TRIGGER:
CREATE TRIGGER richiestaGruppoValida
BEFORE INSERT ON Richiesta
FOR EACH ROW
EXECUTE richiestaGruppoValida();


-------------------------------------------------------------------------------------------------------------------------


17) Se un utente fa già parte di un gruppo, allora non può fare una nuova richiesta per quel gruppo.

FUNZIONE:
CREATE OR REPLACE FUNCTION utenteInGruppoValida()
RETURNS TRIGGER
language plpgsql
AS $utenteInGruppoValida$
DECLARE
	utente_in_gruppo INT;
BEGIN

	SELECT COUNT(*) INTO utente_in_gruppo
		FROM Partecipanti_al_gruppo AS P
		WHERE P.email_membro = NEW.email_utente 
				AND P.tag_gruppo = NEW.tag_gruppo;

	IF ( utente_in_gruppo > 0 ) THEN
		RAISE EXCEPTION 'Richiesta inserita non valida: l utente fa gia parte del gruppo';
	END IF;
	RETURN NEW;
END;
$utenteInGruppoValida$;




TRIGGER:
CREATE TRIGGER utenteInGruppoValida
BEFORE INSERT ON Richiesta
FOR EACH ROW
EXECUTE FUNCTION utenteInGruppoValida();



-------------------------------------------------------------------------------------------------------------------------


7)Il post può essere pubblicato in un gruppo solo se l'utente che lo ha pubblicato vi appartiene



FUNZIONE:
CREATE OR REPLACE FUNCTION postGruppoValido()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $postGruppoValido$
DECLARE
    recupera_partecipazioni CURSOR FOR
        SELECT P.tag_gruppo
        FROM Partecipanti_al_gruppo AS P
        WHERE P.email_membro = NEW.email_creatore_post;
        
    gruppo Partecipanti_al_gruppo.tag_gruppo%TYPE;
    valid INTEGER;
BEGIN
    valid := 0;
    OPEN recupera_partecipazioni;
    
    LOOP
        FETCH recupera_partecipazioni INTO gruppo;
        EXIT WHEN valid = 1 OR NOT FOUND; 
        
        IF (gruppo = NEW.tag_gruppo) THEN
            valid := 1;
        END IF;
    END LOOP;
    
    CLOSE recupera_partecipazioni; 

    IF (valid <> 1) THEN
        RAISE EXCEPTION 'L''utente non può pubblicare in questo gruppo';
    END IF;
    
    RETURN NEW;
END;
$postGruppoValido$;




TRIGGER:
CREATE TRIGGER postGruppoValido
BEFORE INSERT ON Post
FOR EACH ROW
EXECUTE FUNCTION postGruppoValido();



-------------------------------------------------------------------------------------------------------------------------

8)verifica che percorso_file termini con .jpg o .png

ALTER TABLE Post									[POTREBBE FUNZIONARE?]
ADD CONSTRAINT check_file_valido 
		CHECK percorso_file ~'^[a-zA-Z0-9._%+-]+.png$') ;

////////////////////////////////////////////////////////////

FUNZIONE:
CREATE OR REPLACE FUNCTION fileValido()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $fileValido$
DECLARE
    valid INTEGER;
    lunghezza INTEGER;
    finale TEXT;
BEGIN
	IF (NEW.percorso_file IS NULL) THEN
        RETURN NEW;
    END IF;
    valid := 0;
    lunghezza := LENGTH(NEW.percorso_file); 
    finale := SUBSTR(NEW.percorso_file, lunghezza-3, lunghezza);

    IF (finale = '.png' OR finale = '.jpg') THEN 
        valid := 1; 
    END IF;

    IF (valid <> 1) THEN 
        RAISE EXCEPTION 'il file deve essere png o jpg'; 
    END IF;

    RETURN NEW;
END;
$fileValido$;

TRIGGER:
CREATE TRIGGER fileValido
BEFORE INSERT ON Post
FOR EACH ROW
EXECUTE fileValido();

------------------------------------------------------------------------------------------------------
verifica che img_profilo termini con .jpg o .png 

CREATE OR REPLACE FUNCTION ImgProfiloValido()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $ImgProfiloValido$
DECLARE
    valid INTEGER;
    lunghezza INTEGER;
    finale TEXT;
BEGIN
    IF (NEW.img_profilo IS NULL) THEN
        RETURN NEW;
    END IF;

    valid := 0;
    lunghezza := LENGTH(NEW.img_profilo); 
    finale := SUBSTR(NEW.img_profilo, lunghezza-3, lunghezza);

    IF (finale = '.png' OR finale = '.jpg') THEN 
        valid := 1; 
    END IF;

    IF (valid <> 1) THEN 
        RAISE EXCEPTION 'il file per l immagine del profilo deve essere png o jpg'; 
    END IF;

    RETURN NEW;
END;
$ImgProfiloValido$;






TRIGGER:
CREATE TRIGGER ImgProfiloValido
BEFORE INSERT ON utente
FOR EACH ROW
EXECUTE FUNCTION ImgProfiloValido();









-------------------------------------------------------------------------------------------------------------------------

[DIDASCALIA DI POST DEVE ESSRE MESSO A NOT NULL]

CREATE OR REPLACE FUNCTION paroleOscene()
RETURNS VARCHAR
language plpgsql
AS $paroleOscene$
DECLARE
	parole := ' Sanremo + Rai + Fiorello '

	RETURN parole;
END;
$paroleOscene$




FUNZIONE:
CREATE OR REPLACE FUNCTION controlloOscenita()
RETURNS TRIGGER
language plpgsql
AS $controlloOscenita$
DECLARE

	pos INTEGER := 0;
	pos_prec INTEGER := 0;
	parole VARCHAR;
	parola_in VARCHAR;
	trovata BOOLEAN := FALSE;

BEGIN
	parole := paroleOscene();
	LOOP
		pos := INSTR(lista_test, '@', pos_prec); 				//pos_prec è l'offset
		parola_in := SUBSTR(parole, pos_prec+1, pos-1);
	
		IF ( INSTR(NEW.didascalia, parola_in) > 0) THEN
			trovata := 1;
		END IF;

	EXIT WHEN pos = 0 OR trovata = TRUE;
	END LOOP;

	IF ( trovata = 1 ) THEN
		RAISE EXCEPTION ('Il post non può essere pubblicato perchè contiene parole oscene.');
	END IF;

END;
$controlloOscenita$	




TRIGGER:
CREATE TRIGGER controlloOscenita
BEFORE INSERT ON Post
FOR EACH ROW
EXECUTE FUNCTION controlloOscenita();

