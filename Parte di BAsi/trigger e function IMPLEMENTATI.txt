1)Vincolo di Post : Se un post è di tipo : Post_Semplice l'attributo File di post è NULL.
2)Vincolo di POst : Se l'attributo File di Post non è NULL implica che Post è di tipo : Post_Con_Media.

FUNCTION:
create or replace function filePresenteInPost()
returns trigger 
language plpgsql
as $filePresenteInPost$
BEGIN
    IF NEW.percorso_file IS NULL THEN
        NEW.tipo_file = 'post_semplice';
    ELSE
        NEW.tipo_file = 'post_con_media';
    END IF;
	return new;
END;
$filePresenteInPost$;


TRIGGER:
CREATE TRIGGER filePresenteInPost 
BEFORE INSERT ON Post
FOR EACH ROW EXECUTE FUNCTION filePresenteInPost();
------------------------------------------------------------------------------------------------

2)quando in Richiesta viene fatto un UPDATE  di accettata (da NULL/0 a 1), viene aggiunta la riga in Partecipanti_al_gruppo


TRIGGER:
CREATE TRIGGER accettaNuovoMembro
AFTER UPDATE ON Richiesta
FOR EACH ROW
EXECUTE FUNCTION accettaNuovoMembro();
---------------------versione chatgpt--------------------------------
CREATE OR REPLACE FUNCTION accettaNuovoMembro()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $accettaNuovoMembro$
BEGIN
    IF OLD.accettato IS NULL AND NEW.accettato = true THEN
        INSERT INTO Partecipanti_al_gruppo (email_membro, tag_gruppo)
        VALUES (NEW.email_utente, NEW.tag_gruppo);
    END IF;
    
    RETURN NEW;
END;
$accettaNuovoMembro$;
------------------------------------------------------------------------------------------------

3)verifica che percorso_file termini con .jpg o .png

FUNZIONE:
CREATE OR REPLACE FUNCTION fileValido()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $fileValido$
DECLARE
    valid INTEGER;
    lunghezza INTEGER;
    finale TEXT;
BEGIN
	IF (NEW.percorso_file IS NULL) THEN
        RETURN NEW;
    END IF;
    valid := 0;
    lunghezza := LENGTH(NEW.percorso_file); 
    finale := SUBSTR(NEW.percorso_file, lunghezza-3, lunghezza);

    IF (finale = '.png' OR finale = '.jpg') THEN 
        valid := 1; 
    END IF;

    IF (valid <> 1) THEN 
        RAISE EXCEPTION 'il file deve essere png o jpg'; 
    END IF;

    RETURN NEW;
END;
$fileValido$;

TRIGGER:
CREATE TRIGGER fileValido
BEFORE INSERT ON Post
FOR EACH ROW
EXECUTE FUNCTION fileValido();
------------------------------------------------------------------------------------------------
4)verifica che img_profilo termini con .jpg o .png 

CREATE OR REPLACE FUNCTION ImgProfiloValido()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $ImgProfiloValido$
DECLARE
    valid INTEGER;
    lunghezza INTEGER;
    finale TEXT;
BEGIN
    IF (NEW.img_profilo IS NULL) THEN
        RETURN NEW;
    END IF;

    valid := 0;
    lunghezza := LENGTH(NEW.img_profilo); 
    finale := SUBSTR(NEW.img_profilo, lunghezza-3, lunghezza);

    IF (finale = '.png' OR finale = '.jpg') THEN 
        valid := 1; 
    END IF;

    IF (valid <> 1) THEN 
        RAISE EXCEPTION 'il file per l immagine del profilo deve essere png o jpg'; 
    END IF;

    RETURN NEW;
END;
$ImgProfiloValido$;






TRIGGER:
CREATE TRIGGER ImgProfiloValido
BEFORE INSERT ON utente
FOR EACH ROW
EXECUTE FUNCTION ImgProfiloValido();
------------------------------------------------------------------------------------------------
5)Alla creazione di una notifica, la tabella Raggiunge viene popolata, inviando la notifica a tutti i 
partecipanti del gruppo in cui è stato pubblicato il post.

FUNZIONE:
CREATE OR REPLACE FUNCTION notificaRaggiungeUtenti()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $notificaRaggiungeUtenti$
DECLARE 
    recupera_utenti CURSOR FOR
        SELECT PG.email_membro
        FROM Post P
        JOIN Gruppo G ON P.tag_gruppo = G.tag
        JOIN Partecipanti_al_gruppo PG ON G.tag = PG.tag_gruppo
        WHERE P.id_post = NEW.id_post_pubblicato;

    email Utente.email%TYPE;
BEGIN
    OPEN recupera_utenti;

    LOOP
        FETCH recupera_utenti INTO email;
        EXIT WHEN NOT FOUND; -- Corretto NOT FOUND
        INSERT INTO Raggiunge VALUES (email, NEW.id_notifica);
    END LOOP;

    CLOSE recupera_utenti;
RETURN NEW;
END;
$notificaRaggiungeUtenti$;
 

TRIGGER:
CREATE TRIGGER notificaRaggiungeUtenti
AFTER INSERT ON Notifica
FOR EACH ROW EXECUTE FUNCTION notificaRaggiungeUtenti();
-----------------------------------------------------------------------------------
6) all inserimento di un nuovo post nella tabella post viene generata una notifica
FUNZIONE:
CREATE OR REPLACE FUNCTION NuovaNotifica()
RETURNS TRIGGER
language plpgsql
AS $NuovaNotifica$
DECLARE
BEGIN
	insert into notifica(id_post_pubblicato) values (NEW.id_post);
RETURN NEW;
END;
$NuovaNotifica$;


TRIGGER:
CREATE TRIGGER NuovaNotifica
AFTER INSERT ON post
FOR EACH ROW EXECUTE FUNCTION NuovaNotifica();


-----------------------------------------------------------------------------------
7)Il post può essere pubblicato in un gruppo solo se l'utente che lo ha pubblicato vi appartiene



FUNZIONE:
CREATE OR REPLACE FUNCTION postGruppoValido()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $postGruppoValido$
DECLARE
    recupera_partecipazioni CURSOR FOR
        SELECT P.tag_gruppo
        FROM Partecipanti_al_gruppo AS P
        WHERE P.email_membro = NEW.email_creatore_post;
        
    gruppo Partecipanti_al_gruppo.tag_gruppo%TYPE;
    valid INTEGER;
BEGIN
    valid := 0;
    OPEN recupera_partecipazioni;
    
    LOOP
        FETCH recupera_partecipazioni INTO gruppo;
        EXIT WHEN valid = 1 OR NOT FOUND; 
        
        IF (gruppo = NEW.tag_gruppo) THEN
            valid := 1;
        END IF;
    END LOOP;
    
    CLOSE recupera_partecipazioni; 

    IF (valid <> 1) THEN
        RAISE EXCEPTION 'L''utente non può pubblicare in questo gruppo';
    END IF;
    
    RETURN NEW;
END;
$postGruppoValido$;




TRIGGER:
CREATE TRIGGER postGruppoValido
BEFORE INSERT ON Post
FOR EACH ROW
EXECUTE FUNCTION postGruppoValido();
-----------------------------------------------------------------------------------
8)quando viene creato un gruppo, automaticamente viene aggiunto il creatore nella lista dei partecipanti.

FUNZIONE:
CREATE OR REPLACE FUNCTION primoPartecipante()
RETURNS TRIGGER
language plpgsql
AS $primoPartecipante$
BEGIN

	INSERT INTO Partecipanti_al_gruppo 
		VALUES(NEW.email_creatore, NEW.tag);
return new;

END;	
$primoPartecipante$;


TRIGGER:
CREATE TRIGGER primoPartecipante
AFTER INSERT ON Gruppo
FOR EACH ROW EXECUTE FUNCTION primoPartecipante();
-----------------------------------------------------------------------------------
9)Se esiste già una richiesta (di un dato utente per un dato gruppo) ancora non considerata, allora non si può aggiungere una nuova richiesta.


---------------------------VERSIONE CHATGPT_________________
CREATE OR REPLACE FUNCTION richiestaGruppoValida()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $richiestaGruppoValida$
DECLARE
    richieste_in_corso INT;
BEGIN
    SELECT COUNT(*) INTO richieste_in_corso
    FROM Richiesta AS R
    WHERE R.email_utente = NEW.email_utente 
        AND R.tag_gruppo = NEW.tag_gruppo
        AND R.accettato IS NULL;

    IF richieste_in_corso > 0 THEN
        RAISE EXCEPTION 'Richiesta inserita non valida: esiste già una richiesta ancora da considerare.';
    END IF;

    RETURN NEW;
END;
$richiestaGruppoValida$;


TRIGGER:
CREATE TRIGGER richiestaGruppoValida
BEFORE INSERT ON Richiesta
FOR EACH ROW
EXECUTE richiestaGruppoValida();
-----------------------------------------------------------------------------------
10) Se un utente fa già parte di un gruppo, allora non può fare una nuova richiesta per quel gruppo.

FUNZIONE:
CREATE OR REPLACE FUNCTION utenteInGruppoValida()
RETURNS TRIGGER
language plpgsql
AS $utenteInGruppoValida$
DECLARE
	utente_in_gruppo INT;
BEGIN

	SELECT COUNT(*) INTO utente_in_gruppo
		FROM Partecipanti_al_gruppo AS P
		WHERE P.email_membro = NEW.email_utente 
				AND P.tag_gruppo = NEW.tag_gruppo;

	IF ( utente_in_gruppo > 0 ) THEN
		RAISE EXCEPTION 'Richiesta inserita non valida: l utente fa gia parte del gruppo';
	END IF;
	RETURN NEW;
END;
$utenteInGruppoValida$;




TRIGGER:
CREATE TRIGGER utenteInGruppoValida
BEFORE INSERT ON Richiesta
FOR EACH ROW
EXECUTE FUNCTION utenteInGruppoValida();
-----------------------------------------------------------------------------------
11)Se una richiesta è false non può essere modificata // NON VA
FUNZIONE : 
CREATE OR REPLACE FUNCTION richiestaNonModificabile()
RETURNS TRIGGER
language plpgsql
AS $richiestaNonModificabile$
DECLARE
	ultima_richiesta timestamp;
BEGIN
	select MAX(data_ora_richiesta) into ultima_richiesta from richiesta where email_utente = new.email_utente AND tag_gruppo = new.tag_gruppo;

	//UPDATE richiesta set accettato = new.accetatto where email_utente = new.email_utente AND tag_gruppo = new.tag_gruppo AND data_ora_richiesta = ultima_richiesta;

	IF(old.accettato <> new.accettato AND old.accettato is not NULL AND old.data_ora_richiesta <> ultima_richiesta) THEN
		RAISE EXCEPTION 'Non puoi modificare la richiesta';
  end if;
  RETURN NEW;
end;
$richiestaNonModificabile$;

TRIGGER:
CREATE TRIGGER richiestaNonModificabile
BEFORE UPDATE ON Richiesta
FOR EACH ROW 
EXECUTE FUNCTION richiestaNonModificabile();
/