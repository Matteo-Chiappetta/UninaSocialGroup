TRIGGER X PROGETTO

Trigger:
1)Vincolo di Post : Se un post è di tipo : Post_Semplice l'attributo File di post è NULL.
2) Vincolo di POst : Se l'attributo File di Post non è NULL implica che Post è di tipo : Post_Con_Media.

CREATE TRIGGER filePresenteInPost 
BEFORE INSERT ON Post
FOR EACH ROW 
BEGIN

IF percorso_file == NULL THEN
	NEW.tipo_file = 'post_semplice';
ELSE
	NEW.tipo_file = 'post_con_media';
ENDIF;

END;


3)data e ora del commento del post non può essere antecedente alla data e ora della pubblicazione del post.

CREATE TRIGGER dataCommentoValida
BEFORE INSERT ON Commento
FOR EACH ROW

DECLARE
	e_data_non_valida EXCEPTION;
	PRAGMA EXCEPTION_INIT( e_data_non_valida, -20001 );

	data_post Post.data%TYPE;
	ora_post Post.ora%TYPE;

BEGIN

SELECT P.data, P.ora INTO data_post, ora_post
	FROM Post AS P
	WHERE NEW.id_post = P.id_post;

IF ( data_post > NEW.data_commento || ora_post > NEW.ora_commento ) THEN
	RAISE_APPLICATION_ERROR(-20001, 'Data e/o ora non sono valide.');
ENDIF;

END;

[MA E' DAVVERO NECESSARIO QUESTO TRIGGER? NON POTREMMO SOSTITUIRLO CON LA VERSIONE SUCCESSIVA:]

CREATE TRIGGER dataCommentoValida
BEFORE INSERT ON Commento
FOR EACH ROW
DECLARE
	current_date DATE;
	current_time TIME;
	
BEGIN

SELECT SYSDATE
  INTO current_date
  FROM dual;
SELECT SYSDATE
  INTO current_time
  FROM dual;
NEW.data_commento = current_date;
NEW.ora_commento = current_time;

END;



4)leggittimita dell'email verificare che abbia la @.

ALTER TABLE Utente
ADD CONSTRAINT check_email_valida 
		CHECK (email ~'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$') ;

6)Vincolo verifica password con carattere maiuscolo,numeri, caratteri speciali e che abbia almeno 8 caratteri.

ALTER TABLE Utente
ADD CONSTRAINT check_password_valida 
		CHECK (password ~'^[0-9]{1,}$' AND password ~*'^[A-Z]{1,}$' 
				AND password ~*'^[a-z]{1,}$'  AND password ~*'^[!?@#%&$]{1,}$'
				AND LENGHT(password) >= 8 ) ;


12)data e ora della notifica del post non può essere antecedente alla data e ora della pubblicazione del post.
[PRIMA FACCIO IN MODO CHE OGNI VOLTA CHE CREO UN POST, LA NOTIFICA VENGA CREATA AUTOMATICAMENTE]
[CREO ANCHE IL VINCOLO, IN CASO QUALCUNO PROVASSE A INSERIRE UNA NOTIFICA SBAGLIATA MANUALMENTE]

ALTER TABLE Notifica
ADD CONSTRAINT  notifica_per_post UNIQUE (id_notifica, id_post_pubblicato)



CREATE TRIGGER nuova_notifica
AFTER INSERT ON Post
FOR EACH ROW
DECLARE 
	current_date DATE;
	current_time TIME;

BEGIN 
SELECT SYSDATE
  INTO current_date
  FROM dual;
SELECT SYSDATE
  INTO current_time
  FROM dual;

INSERT INTO Notifica (data_notifica, ora_notifica, id_post_pubblicato)
		VALUES(current_date, current_time, NEW.id_post);

END;



CREATE TRIGGER notifica_valida
BEFORE INSERT ON Notifica
FOR EACH ROW

DECLARE
	e_notifica_non_valida EXCEPTION;
	PRAGMA EXCEPTION_INIT( e_notifica_non_valida, -20002 );

	data_post Post.data%TYPE;
	ora_post Post.ora%TYPE;
	post Post.id_post%TYPE;
	num INT;

BEGIN 

SELECT P.id_post, P.data, P.ora INTO post, data_post, ora_post
	FROM Post AS P
	WHERE NEW.id_post_pubblicato = P.id_post;

IF( post = NULL ) THEN
	RAISE_APPLICATION_ERROR(-20002, 'Non esiste post per questa notifica.');    //NON SERVE PERCHè è GIA VINCOLO DI FK!!!!!!
ENDIF;

IF(data_post > NEW.data_notifica || ora_post > NEW.ora_notifica ) THEN
	RAISE_APPLICATION_ERROR(-20002, 'Notifica non valida.');
ENDIF;

SELECT COUNT(N.id_post_pubblicato) INTO num
	FROM Notifica AS N
	WHERE NEW.id_post_pubblicato = N.id_post_publicato;

IF( num >= 1 ) THEN
	RAISE_APPLICATION_ERROR(-20002, 'Già esiste una notifica per questo post.');     //POSSO FARE UN ALTER TABLE ADD CONSTRAINT UNIQUE
ENDIF;

END;


--------------------------------------------------------------------------------------------------------------------------------------
[RAGGIUNGE]

CREATE TRIGGER notifica_raggiunge_utenti
AFTER INSERT ON Notifica
FOR EACH ROW
DECLARE 

	CURSOR recupera_utenti IS
		SELECT PG.email_membro
		FROM (Post P JOIN Gruppo G ON P.tag_gruppo = G.tag ) 
								JOIN Partecipanti_al_gruppo PG ON G.tag = PG.tag_gruppo
		WHERE P.id_post = NEW.id_post_pubblicato;
		
	email Utente.email%TYPE;

BEGIN

OPEN recupera_utenti;

LOOP
	FETCH recupera_utenti INTO email;
	INSERT INTO Raggiunge VALUES
		(email, NEW.id_notifica);
ENDLOOP;

END;


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
ALTRI TRIGGER E FUNZIONI
1) Ogni volta che si aggiunge un like, cambia il numero di like ad un post.

ALTER TABLE Post
ADD COLUMN num_mi_piace INT
ADD COLUMN num_commenti INT 


CREATE TRIGGER aggiorna_numero_mp
AFTER INSERT ON Mi_piace
FOR EACH ROW
DECLARE
	num_mi_piace_prec Post.num_mi_piace%TYPE;
BEGIN

SELECT P.num_mi_piace INTO num_mi_piace_prec
	FROM Post AS P
	WHERE P.id_post = NEW.id_post;

UPDATE Post
	SET num_mi_piace = num_mi_piace_prec+1
	WHERE P.id_post = NEW.id_post;

END;

CREATE TRIGGER diminuisci_numero_mp
AFTER DELETE ON Mi_piace
FOR EACH ROW
DECLARE
	num_mi_piace_prec Post.num_mi_piace%TYPE;
BEGIN

SELECT P.num_mi_piace INTO num_mi_piace_prec
	FROM Post AS P
	WHERE P.id_post = OLD.id_post;

UPDATE Post
	SET num_mi_piace = num_mi_piace_prec-1
	WHERE P.id_post = NEW.id_post;

END;



CREATE TRIGGER num_mp_validi
BEFORE UPDATE ON POST
FOR EACH ROW
WHEN (NEW.num_mi_piace <> OLD.num_mi_piace)
DECLARE

	e_nmp_non_valido EXCEPTION;
	PRAGMA EXCEPTION_INIT( e_nmp_non_valido, -20003 );

	num_mp Post.num_mi_piace%TYPE;

BEGIN
SELECT COUNT(*) INTO num_mp
	FROM Mi_piace AS MP
	WHERE MP.id_post = NEW.id_post;

IF ( NEW.num_mi_piace <> num_mp) THEN
	RAISE EXCEPTION(-20003);
ENDIF;

END;




2) Ogni volta che si aggiunge un commento, cambia il nummero di commenti ad un post.

CREATE TRIGGER aggiorna_numero_commenti
AFTER INSERT ON Commento
FOR EACH ROW
DECLARE
	num_commenti_prec Post.num_commenti%TYPE;
BEGIN

SELECT P.num_commenti INTO num_commenti_prec
	FROM Post AS P
	WHERE P.id_post = NEW.id_post;

UPDATE Post
	SET num_commenti = num_commenti+1
	WHERE P.id_post = NEW.id_post;

END;



CREATE TRIGGER diminuisci_numero_commenti
AFTER DELETE ON Commento
FOR EACH ROW
DECLARE
	num_commenti_prec Post.num_commenti%TYPE;
BEGIN

SELECT P.num_commenti INTO num_commenti_prec
	FROM Post AS P
	WHERE P.id_post = NEW.id_post;

UPDATE Post
	SET num_commenti = num_commenti-1
	WHERE P.id_post = NEW.id_post;

END;



3)Non pubblicare post se contiene una parola censurata.
[Immaginiamo di avere una stringa che possiamo passare come input con tutte parole da censurare separate da una virgola.]
[inserire controllo sulla lunghezza della stringa di input non nulla.]



CREATE TRIGGER controllo_oscenita




CREATE OR REPLACE FUNCTION contiene_oscenita ( VARCHAR2 IN parole_censurate)
	RETURN BOOLEAN



4)quando viene creato un gruppo, automaticamente viene aggiunto il creatore nella lista dei partecipanti.

ALTER TABLE Partecipanti_al_gruppo
	ADD CONSTRAINT UNIQUE(email_membro, tag_gruppo)


CREATE TRIGGER nuovo_gruppo
AFTER INSERT ON Gruppo
FOR EACH ROW
BEGIN

INSERT INTO Partecipanti_al_gruppo 
	VALUES(NEW.email_creatore, NEW.tag);

END;	


4)quando in Richiesta viene fatto un UPDATE  di accettata (da NULL/0 a 1), viene aggiunta la riga in Partecipanti_al_gruppo
